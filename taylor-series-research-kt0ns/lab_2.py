import math  # Модуль для работы с математическими функциями

import matplotlib.pyplot as plt  # Библиотека для построения графиков
import numpy as np  # Библиотека для работы с массивами и математическими операциями

pi = np.pi  # Константа π из библиотеки numpy


# Функция для вычисления отдельного члена ряда Тейлора
def my_func(n, x):
    # Возвращает n-й член ряда Тейлора
    i = (-1 if n % 4 == 3 else 1) * 1/2 * 0 ** ((n + 1) % 2) \
        + (-1 if n % 4 == 2 else 1) * math.sqrt(3)/2 * 0 ** (n % 2)
    return (i * x ** n) / math.factorial(n)


# Функция для вычисления суммы ряда Тейлора до n-го члена
def sum_series(n, x):
    result = 0  # Начальное значение суммы
    for a in range(n + 1):  # Цикл по всем членам ряда от 0 до n
        term = my_func(a, x)  # Вычисление текущего члена ряда
        result += term  # Добавление члена ряда к сумме
    return result  # Возвращаем сумму


# Генерация значений x в диапазоне от -2π до 2π с шагом
x_values = np.linspace(-2 * pi, 2 * pi, 1000)

# Список значений n для многочленов Тейлора
n_values = list(range(1, 6))  # Значения n от 1 до 5

x = 0.2  # Значение x, для которого проводится сравнение
n1 = 3  # Порядок первого многочлена Тейлора
n2 = 5  # Порядок второго многочлена Тейлора

# Расчёт приближённых значений функции для заданных порядков многочлена Тейлора
first_value = sum_series(n1, x)  # Сумма ряда Тейлора 3-го порядка
second_value = sum_series(n2, x)  # Сумма ряда Тейлора 5-го порядка

# Заданные допустимые отклонения
d1 = 10 ** -3  # Допустимое отклонение до 3 знаков после запятой
d2 = 10 ** -6  # Допустимое отклонение до 6 знаков после запятой

# Вычисление точного значения функции
exact_value = np.sin(math.pi / 3 + x)

# Форматированная ширина для выравнивания текста
width = 15  # Ширина колонок для чисел

# Вывод точного значения функции
print(f"Точное значение sin(pi/3 + 0.2), вычисленное компьютером: {exact_value}")
print("=" * 80)

# Сравнение точности до 3 знаков после запятой
print("Сравним точность до 3 знаков после запятой:")
print(f"{'Точное значение:':<60}{exact_value:>{width}.3f}")
print(f"{'Приближенное значение, многочлен Тейлора 3 степени:':<60}{first_value:>{width}.3f}")
print(f"Значения находятся в пределах допустимого отклонения {d1}: {abs(exact_value - first_value) < d1}")
print()

# Сравнение точности до 6 знаков после запятой
print("Сравним точность до 6 знаков после запятой:")
print(f"{'Точное значение:':<60}{exact_value:>{width}.6f}")
print(f"{'Приближенное значение, многочлен Тейлора 5 степени:':<60}{second_value:>{width}.6f}")
print(f"Значения находятся в пределах допустимого отклонения {d2}: {abs(exact_value - second_value) < d2}")

# Построение графиков
plt.figure(figsize=(16, 9))  # Задаём размер графика

# Генерация цветов для каждого порядка многочлена Тейлора
colors = plt.cm.rainbow(np.linspace(0, 1, len(n_values)))

# Построение графиков многочленов Тейлора
for n, color in zip(n_values, colors):
    # Вычисление значений для многочлена Тейлора порядка n
    y_values = [sum_series(n, x) for x in x_values]
    # Построение графика с заданным цветом и пунктирной линией
    line, = plt.plot(x_values, y_values, color=color, label=f'n = {n}', alpha=0.85)
    line.set_dashes([10, 8])  # Задаём стиль пунктирной линии

# Построение графика точной функции sin(pi/3 + x)
plt.plot(x_values, np.sin(x_values + pi / 3), 'k', label='sin(pi/3 +x)')

# Настройка заголовка, осей и легенды
plt.title('Графики многочленов Тейлора порядка n')
plt.xlabel('x')  # Метка оси x
plt.ylabel('y')  # Метка оси y
plt.legend()  # Легенда для графиков

# Установка ограничений по оси y
plt.ylim(-2, 2)

# Включение сетки
plt.grid(True)

# Отображение графика
plt.show()
